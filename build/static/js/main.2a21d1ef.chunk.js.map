{"version":3,"sources":["Alert.js","Card.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Alert","messages","this","props","errorMessages","length","map","profile","className","role","type","data-dismiss","aria-label","onClick","delMessages","aria-hidden","Component","Card","profiles","key","id","src","avatar_url","alt","name","bio","href","html_url","target","rel","delProfile","Form","handleSubmit","event","a","preventDefault","submit","api_endpoint","state","userName","axios","get","then","response","addProfile","data","catch","err","message","addMessage","setState","onSubmit","value","onChange","placeholder","required","App","profileData","newProfiles","filter","errorMessage","appTitle","apiUrl","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sQA2BeA,E,4JAvBb,WAAU,IAAD,OACDC,EAAWC,KAAKC,MAAMC,cAC5B,OACE,6BACuB,IAApBH,EAASI,OACR,8BAEAJ,EAASK,KAAI,SAAAC,GACX,OACE,yBAAKC,UAAU,iDAAiDC,KAAK,SAClER,EACD,4BAAQS,KAAK,SAASF,UAAU,QAAQG,eAAa,QAAQC,aAAW,QAAQC,QAAS,kBAAM,EAAKV,MAAMW,gBACxG,0BAAMC,cAAY,QAAlB,kB,GAbEC,aCgCLC,E,4JA9Bb,WAAU,IAAD,OACDC,EAAWhB,KAAKC,MAAMe,SAC5B,OACE,6BACuB,IAApBA,EAASb,OACR,wBAAIG,UAAU,iBAAd,oBAEAU,EAASZ,KAAI,SAAAC,GACX,OACC,yBAAKY,IAAKZ,EAAQa,GAAIZ,UAAU,QAC7B,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,oBAAoBa,IAAKd,EAAQe,WAAYC,IAAKhB,EAAQiB,OACzE,yBAAKhB,UAAU,QACb,yBAAKA,UAAU,QAAQD,EAAQiB,MAC/B,yBAAKhB,UAAU,OAAOD,EAAQkB,KAC9B,yBAAKjB,UAAU,eAAc,uBAAGkB,KAAMnB,EAAQoB,SAAUC,OAAO,SAASC,IAAI,uBAA/C,yBAE/B,4BAAQnB,KAAK,SAASF,UAAU,oBAAoBI,aAAW,QAAQC,QAAS,kBAAM,EAAKV,MAAM2B,WAAWvB,EAAQa,MAClH,0BAAML,cAAY,OAAOP,UAAU,IAAnC,mB,GApBDQ,a,yCCoDJe,E,kDAlDb,WAAY5B,GAAO,IAAD,8BAChB,cAAMA,IAOR6B,aARkB,uCAQH,WAAOC,GAAP,iBAAAC,EAAA,6DACbD,EAAME,iBAGAC,EAAS,EAAKjC,MACdkC,EALO,uCAKwC,EAAKC,MAAMC,UALnD,SAMPC,IAAMC,IAAIJ,GAAcK,MAAK,SAAUC,GAC/BP,EAAOQ,WAAWD,EAASE,SAC1BC,OAAM,SAAUC,GACE,wCAAhBA,EAAIC,QACLZ,EAAOa,WAAW,sCAElBb,EAAOa,WAAWF,EAAIC,YAZzB,OAiBb,EAAKE,SAAS,CAACX,SAAU,KAjBZ,2CARG,sDAEhB,EAAKD,MAAQ,CACXC,SAAU,IAHI,E,0CA6BlB,WAAU,IAAD,OACP,OACE,0BAAMY,SAAUjD,KAAK8B,cACnB,yBAAKxB,UAAU,eACb,2BACEE,KAAK,OACLF,UAAU,eACV4C,MAAOlD,KAAKoC,MAAMC,SAClBc,SAAU,SAAApB,GAAK,OAAI,EAAKiB,SAAS,CAACX,SAAUN,EAAML,OAAOwB,SACzDE,YAAY,iCACZC,UAAQ,IAEV,yBAAK/C,UAAU,sBACb,4BAAQA,UAAU,eAAeE,KAAK,UAAtC,mB,GA3COM,aC2DJwC,G,wDA/Cb,WAAYrD,GAAO,IAAD,8BAChB,cAAMA,IASRyC,WAAa,SAACa,GAEZ,IAAMvC,EAAQ,sBAAO,EAAKoB,MAAMpB,UAAlB,CAA4BuC,IAC1C,EAAKP,SAAS,CAAChC,SAAUA,KAbT,EAiBlBY,WAAa,SAACV,GACZ,IACMsC,EADW,EAAKpB,MAAMpB,SACCyC,QAAO,SAAApD,GAAO,OAAIA,EAAQa,KAAOA,KAC9D,EAAK8B,SAAS,CAAChC,SAAUwC,KApBT,EAuBlBT,WAAa,SAACW,GAGZ,IAAM3D,EAAQ,sBAAO,EAAKqC,MAAMlC,eAAlB,CAAiCwD,IAC/C,EAAKV,SAAS,CAAC9C,cAAeH,KA3Bd,EA8BlBa,YAAc,WAEZ,EAAKoC,SAAS,CAAC9C,cADE,MA7BjB,EAAKkC,MAAQ,CACXuB,SAAU,uBACVC,OAAQ,0BACR5C,SAAU,GACVd,cAAe,IAND,E,0CAmClB,WACE,OACE,6BACE,yBAAKI,UAAU,UAAUN,KAAKoC,MAAMuB,UACpC,kBAAC,EAAD,CAAOzD,cAAeF,KAAKoC,MAAMlC,cAAeU,YAAaZ,KAAKY,cAClE,kBAAC,EAAD,CAAM8B,WAAY1C,KAAK0C,WAAYK,WAAY/C,KAAK+C,aACpD,kBAAC,EAAD,CAAMnB,WAAY5B,KAAK4B,WAAYZ,SAAUhB,KAAKoC,MAAMpB,gB,GA1C9CF,cCHE+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.2a21d1ef.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n// Alert - stateless component\r\nclass Alert extends Component {\r\n  render() {\r\n    const messages = this.props.errorMessages;\r\n    return(\r\n      <div>\r\n        {messages.length === 0 ? (\r\n          <div></div>\r\n        ) : (\r\n          messages.map(profile => {\r\n            return (\r\n              <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\r\n                {messages}\r\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick={() => this.props.delMessages()}>\r\n                  <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n              </div>\r\n            );        \r\n          })\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Alert;\r\n","import React, { Component } from 'react';\r\n\r\n// Card - stateless component\r\nclass Card extends Component { \r\n  // render\r\n  render() {\r\n    const profiles = this.props.profiles;\r\n    return (\r\n      <div>\r\n        {profiles.length === 0 ? (\r\n          <h3 className=\"no-record-txt\">Card is empty...</h3>\r\n        ) : (\r\n          profiles.map(profile => {\r\n            return (\r\n             <div key={profile.id} className=\"card\">\r\n                <div className=\"github-profile\">         \r\n                  <img className=\"img img-thumbnail\" src={profile.avatar_url} alt={profile.name} />\r\n                  <div className=\"info\">\r\n                    <div className=\"name\">{profile.name}</div>\r\n                    <div className=\"bio\">{profile.bio}</div>\r\n                    <div className=\"profile_url\"><a href={profile.html_url} target=\"_blank\" rel=\"noopener noreferrer\">View GitHub Profile</a></div>\r\n                  </div>\r\n                  <button type=\"button\" className=\"remove-card close\" aria-label=\"Close\" onClick={() => this.props.delProfile(profile.id)}>\r\n                    <span aria-hidden=\"true\" className=\"\">&times;</span>\r\n                  </button>           \r\n                </div>\r\n              </div>\r\n            );        \r\n          })\r\n        )}\r\n      </div>\r\n    );\r\n  } \r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\n// Form component\r\nclass Form extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      userName: ''\r\n    }\r\n  }\r\n\r\n  //event handler function for form submission\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    \r\n    // fetch data using the axios library\r\n    const submit = this.props;\r\n    const api_endpoint = `https://api.github.com/users/${this.state.userName}`;\r\n    await axios.get(api_endpoint).then(function (response) {\r\n                  submit.addProfile(response.data);\r\n                }).catch(function (err) {\r\n                  if(err.message === 'Request failed with status code 404'){\r\n                    submit.addMessage('GitHub account/username not found.');\r\n                  } else {\r\n                    submit.addMessage(err.message);  \r\n                  }            \r\n                });\r\n    \r\n    //reset form input string\r\n    this.setState({userName: ''});\r\n  };\r\n  \r\n  // render\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <div className=\"input-group\">\r\n          <input \r\n            type=\"text\" \r\n            className=\"form-control\"\r\n            value={this.state.userName}\r\n            onChange={event => this.setState({userName: event.target.value})}\r\n            placeholder=\"GitHub username (e.g. Twitter)\"\r\n            required\r\n          /> \r\n          <div className=\"input-group-append\">\r\n            <button className=\"btn btn-dark\" type=\"submit\">Add Card</button>\r\n          </div>        \r\n        </div>\r\n      </form>\r\n    );\r\n  } \r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\r\n\r\nimport Alert from './Alert.js'\r\nimport Card from './Card.js'\r\nimport Form from './Form.js'\r\n\r\nimport './App.css';\r\n\r\n/*******************************\r\n      The GitHub Cards App \r\n *******************************/\r\n\r\n/**\r\n * ROOT COMPONENT\r\n */\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      appTitle: 'The GitHub Cards App',\r\n      apiUrl: 'https://api.github.com/',    \r\n      profiles: [],\r\n      errorMessages: []\r\n    }\r\n  }\r\n \r\n  addProfile = (profileData) => {\r\n    // destructuring assignment\r\n    const profiles = [...this.state.profiles, profileData];\r\n    this.setState({profiles: profiles});\r\n  };\r\n\r\n  //event handler function for form submission\r\n  delProfile = (id) => {\r\n    const profiles = this.state.profiles;\r\n    const newProfiles = profiles.filter(profile => profile.id !== id);\r\n    this.setState({profiles: newProfiles});\r\n  };\r\n\r\n  addMessage = (errorMessage) => {\r\n    //console.log(errorMessage);\r\n    // destructuring assignment\r\n    const messages = [...this.state.errorMessages, errorMessage];\r\n    this.setState({errorMessages: messages});\r\n  };\r\n\r\n  delMessages = () => {\r\n    const messages = [];\r\n    this.setState({errorMessages: messages});\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"header\">{this.state.appTitle}</div>\r\n        <Alert errorMessages={this.state.errorMessages} delMessages={this.delMessages} />\r\n        <Form addProfile={this.addProfile} addMessage={this.addMessage} />      \r\n        <Card delProfile={this.delProfile} profiles={this.state.profiles}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}