{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Alert","this","props","errorMessages","length","map","profile","className","role","type","data-dismiss","aria-label","onClick","delMessages","aria-hidden","React","Component","Card","profiles","key","id","src","avatar_url","alt","name","bio","href","html_url","target","delProfile","Form","handleSubmit","event","a","async","preventDefault","submit","api_endpoint","state","userName","axios","get","then","response","addProfile","data","catch","err","message","addMessage","setState","onSubmit","value","onChange","placeholder","required","App","profileData","newProfiles","filter","errorMessage","messages","appTitle","apiUrl","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a55be7fe.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport './App.css';\n\n\n/*******************************\n      The GitHub Cards App \n *******************************/\n\n// Alert component\nclass Alert extends React.Component {\n  render() {\n    return(\n      <div>\n        {this.props.errorMessages.length === 0 ? (\n          <div></div>\n        ) : (\n          this.props.errorMessages.map(profile => {\n            return (\n              <div className=\"alert alert-danger alert-dismissible fade show\" role=\"alert\">\n                {this.props.errorMessages}\n                <button type=\"button\" className=\"close\" data-dismiss=\"alert\" aria-label=\"Close\" onClick={() => this.props.delMessages()}>\n                  <span aria-hidden=\"true\">&times;</span>\n                </button>\n              </div>\n            );        \n          })\n        )}\n      </div>\n    );\n  }\n}\n\n// Card Component\nclass Card extends React.Component { \n  // render\n  render() {\n    return (\n      <div>\n        {this.props.profiles.length === 0 ? (\n          <h3 className=\"no-record-txt\">Card is empty...</h3>\n        ) : (\n          this.props.profiles.map(profile => {\n            return (\n             <div key={profile.id} className=\"card\">\n                <div className=\"github-profile\">         \n                  <img className=\"img img-thumbnail\" src={profile.avatar_url} alt={profile.name} />\n                  <div className=\"info\">\n                    <div className=\"name\">{profile.name}</div>\n                    <div className=\"bio\">{profile.bio}</div>\n                    <div className=\"profile_url\"><a href={profile.html_url} target=\"_blank\">View GitHub Profile</a></div>\n                  </div>\n                  <button type=\"button\" className=\"remove-card close\" aria-label=\"Close\" onClick={() => this.props.delProfile(profile.id)}>\n                    <span aria-hidden=\"true\" className=\"\">&times;</span>\n                  </button>           \n                </div>\n              </div>\n            );        \n          })\n        )}\n      </div>\n    );\n  } \n}\n\n// Form component\nclass Form extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      userName: ''\n    }\n  }\n\n  //event handler function for form submission\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    \n    // fetch data using the axios library\n    const submit = this.props;\n    const api_endpoint = `https://api.github.com/users/${this.state.userName}`;\n    await axios.get(api_endpoint).then(function (response) {\n                  submit.addProfile(response.data);\n                }).catch(function (err) {\n                  if(err.message == 'Request failed with status code 404'){\n                    submit.addMessage('GitHub account/username not found.');\n                  } else {\n                    submit.addMessage(err.message);  \n                  }            \n                });\n    \n    //reset form input string\n    this.setState({userName: ''});\n  };\n  \n  // render\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <div className=\"input-group\">\n          <input \n            type=\"text\" \n            className=\"form-control\"\n            value={this.state.userName}\n            onChange={event => this.setState({userName: event.target.value})}\n            placeholder=\"GitHub username (e.g. Twitter)\"\n            required\n          /> \n          <div className=\"input-group-append\">\n            <button className=\"btn btn-dark\" type=\"submit\">Add Card</button>\n          </div>        \n        </div>\n      </form>\n    );\n  } \n}\n\n/**\n * ROOT COMPONENT\n */\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      appTitle: 'The GitHub Cards App',\n      apiUrl: 'https://api.github.com/',    \n      profiles: [],\n      errorMessages: []\n    }\n  }\n \n  addProfile = (profileData) => {\n    // destructuring assignment\n    const profiles = [...this.state.profiles, profileData];\n    this.setState({profiles: profiles});\n  };\n\n  //event handler function for form submission\n  delProfile = (id) => {\n    const profiles = this.state.profiles;\n    const newProfiles = profiles.filter(profile => profile.id !== id);\n    this.setState({profiles: newProfiles});\n  };\n\n  addMessage = (errorMessage) => {\n    //console.log(errorMessage);\n    // destructuring assignment\n    const messages = [...this.state.errorMessages, errorMessage];\n    this.setState({errorMessages: messages});\n  };\n\n  delMessages = () => {\n    const messages = [];\n    this.setState({errorMessages: messages});\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"header\">{this.state.appTitle}</div>\n        <Alert errorMessages={this.state.errorMessages} delMessages={this.delMessages} />\n        <Form addProfile={this.addProfile} addMessage={this.addMessage} />      \n        <Card delProfile={this.delProfile} profiles={this.state.profiles}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}